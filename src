package main.cxtrain;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.entity.Zombie;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class CX_Train extends JavaPlugin {

    private Map<Player, Zombie> trainers = new HashMap<>();
    private int totemAmount = 64; // Default Totem count
    private String defaultTrainerName = "";

    @Override
    public void onEnable() {
        getLogger().info("CordTrain activated");

        // Creating the pluginfolder
        if (!getDataFolder().exists()) {
            getDataFolder().mkdir();
        }

        // Loading the config
        loadConfig();

        // Event-Listener to figure out if the player left the world
        getServer().getPluginManager().registerEvents(new PlayerListener(), this);
    }

    @Override
    public void onDisable() {
        getLogger().info("CordTrain deactivated");
    }

    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
        if (cmd.getName().equalsIgnoreCase("train")) {
            if (!(sender instanceof Player)) {
                sender.sendMessage("This command can only be executed by a player!");
                return true;
            }
            Player player = (Player) sender;
            String trainerName = getConfig().getString("trainer_name", defaultTrainerName);
            if (args.length > 0) {
                trainerName = args[0];
            }
            Zombie oldTrainer = trainers.remove(player);
            if (oldTrainer != null && oldTrainer.isValid()) {
                oldTrainer.remove();
                getLogger().info("The old Trainer of " + player.getName() + " got deleted");
            }
            spawnTrainer(player, trainerName);
            player.sendMessage("A new Trainer just arrived!");
            return true;
        }
        return false;
    }

    // Load config
    private void loadConfig() {
        File configFile = new File(getDataFolder(), "config.yml");
        if (!configFile.exists()) {
            // Create a config if you dont have one yet!
            getConfig().addDefault("totem_amount", 64);
            getConfig().addDefault("trainer_name", ""); // There is no default name
            getConfig().options().copyDefaults(true);
            saveConfig();
        }
        totemAmount = getConfig().getInt("totem_amount");
        defaultTrainerName = getConfig().getString("trainer_name", ""); // Set Default Trainer name
        if (defaultTrainerName.isEmpty()) { // If Default name is empty it gets set to: "<player>'s Trainer"
            defaultTrainerName = "<player>'s Trainer";
            getConfig().set("trainer_name", defaultTrainerName);
            saveConfig();
        }
        reloadConfig(); // Restart to use your new config
    }
    // Methode zum Spawning des Trainers
    private void spawnTrainer(Player player, String trainerName) {
        Location spawnLocation = player.getLocation(); // Spawns the Trainer at the location of Player
        World world = player.getWorld();
        Zombie trainer = (Zombie) world.spawnEntity(spawnLocation, EntityType.ZOMBIE);
        trainer.setCustomName(trainerName.replace("<player>", player.getName())); // Use Name of your coice
        trainer.setCustomNameVisible(true);

        // Rüstung und Ausrüstung des Trainers
        ItemStack helmet = new ItemStack(Material.NETHERITE_HELMET);
        helmet.addEnchantment(Enchantment.PROTECTION_EXPLOSIONS, 4);
        trainer.getEquipment().setHelmet(helmet);

        ItemStack chestplate = new ItemStack(Material.NETHERITE_CHESTPLATE);
        chestplate.addEnchantment(Enchantment.PROTECTION_ENVIRONMENTAL, 4);
        trainer.getEquipment().setChestplate(chestplate);

        ItemStack leggings = new ItemStack(Material.NETHERITE_LEGGINGS);
        leggings.addEnchantment(Enchantment.PROTECTION_ENVIRONMENTAL, 4);
        trainer.getEquipment().setLeggings(leggings);

        ItemStack boots = new ItemStack(Material.NETHERITE_BOOTS);
        boots.addEnchantment(Enchantment.PROTECTION_ENVIRONMENTAL, 4);
        trainer.getEquipment().setBoots(boots);

        trainer.getEquipment().setItemInMainHand(new ItemStack(Material.TOTEM_OF_UNDYING, totemAmount));

        trainers.put(player, trainer);
        getServer().getScheduler().runTaskLater(this, () -> {
            Zombie currentTrainer = trainers.remove(player);
            if (currentTrainer != null && currentTrainer.isValid()) {
                currentTrainer.remove();
                getLogger().info("The trainer of" + player.getName() + " got deleted because the time ran out!");
            }
        }, 6000); // &000 ticks = 5 minutes
    }

    // Event-Listener to figure out if the player left the world
    private class PlayerListener implements org.bukkit.event.Listener {
        @org.bukkit.event.EventHandler
        public void onPlayerQuit(org.bukkit.event.player.PlayerQuitEvent event) {
            Player player = event.getPlayer();
            Zombie trainer = trainers.remove(player);
            if (trainer != null && trainer.isValid()) {
                trainer.remove();
                getLogger().info("The Trainer of " + player.getName() + " got deleted because he left the world");
            }
        }
    }
